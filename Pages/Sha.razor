@page "/sha"
@using Blockchain.Data
@inject ShaService ShaService

<div class="container">

    <div class="row mb-1">
        
        <div class="input-group">
            <div class="input-group-prepend">
                <span class="input-group-text">Data   :</span>
            </div>
            <textarea type="text" rows="10"  class="form-control col" @bind-value="DataToHash" @bind-value:event="oninput"/>
        </div>

    </div>

    <div class="row">
        <div class="input-group">
            <div class="input-group-prepend">
                <span class="input-group-text">Sha256:</span>
            </div>
            <input type="text"  class="form-control col" @bind-value="Hash" />
        </div>
    </div>

    <p></p>
    <span><b>Хеш-функция</b> (англ. hash function от hash — «превращать в фарш», «мешанина»[1]), или <b>функция свёртки</b> — функция, осуществляющая преобразование массива входных данных произвольной длины в (выходную) битовую строку установленной длины, выполняемое определённым алгоритмом.</span>
    <p></p>
    <p><b>Криптографическая хеш-функция</b></p>
    <p><b>1. Стойкость к поиску первого прообраза</b> - отсутствие эффективного полиномиального алгоритма вычисления обратной функции, т.е. нельзя восстановить текст по известной его свертке за реальное время. Это свойство эквивалентно тому, что хеш-функция является односторонней функцией.</p>
    <p><b>2. Стойкость к поиску второго прообраза</b> - вычислительно невозможно, зная сообщение и его хэш, найти такое другое сообщение отличное от исходного, чтобы их хэши были равны.</p>

 </div>
@functions
{
  

    private string _data;

    private string DataToHash
    {
        get => _data;
        set
        {
            _data = value;
            Hash = ShaService.GetSha(value);
        }
    }

    private string Hash { get; set; }


}
